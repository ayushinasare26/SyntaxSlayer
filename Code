import cv2
import time
from ultralytics import YOLO  # Using YOLOv8
import numpy as np

# Load YOLOv8 model (make sure you've downloaded it or use a pre-trained one)
model = YOLO('yolov8n.pt')  # Use a lightweight model for real-time performance

# Initialize video capture (0 for default camera)
cap = cv2.VideoCapture(0)

# Set frame size (optional, depends on your camera)
cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)

# Traffic light durations (default)
green_duration = 10
yellow_duration = 3
red_duration = 10

# Define zones for vehicle counting (adjust coordinates as needed)
zone_coords = [(100, 300), (550, 300)]  # Line for counting

def count_vehicles(frame):
    results = model(frame)
    detections = results[0].boxes

    vehicle_classes = [2, 3, 5, 7]  # Car, motorcycle, bus, truck
    count = 0

    if detections is not None:
        for box in detections:
            cls = int(box.cls)
            if cls in vehicle_classes:
                count += 1
                x1, y1, x2, y2 = map(int, box.xyxy[0])
                cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
                cv2.putText(frame, model.model.names[cls], (x1, y1 - 10),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 1)

    return count, frame

def get_signal_duration(vehicle_count):
    # Basic logic: more vehicles => longer green light
    if vehicle_count > 15:
        return 20
    elif vehicle_count > 10:
        return 15
    elif vehicle_count > 5:
        return 10
    else:
        return 7

while True:
    ret, frame = cap.read()
    if not ret:
        break

    vehicle_count, annotated_frame = count_vehicles(frame)
    green_time = get_signal_duration(vehicle_count)

    # Display status on frame
    cv2.putText(annotated_frame, f'Vehicles Detected: {vehicle_count}', (10, 30),
                cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
    cv2.putText(annotated_frame, f'Green Light Duration: {green_time}s', (10, 60),
                cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 255), 2)

    cv2.imshow('Smart Traffic Light', annotated_frame)

    key = cv2.waitKey(1)
    if key == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()





Optional: Integrate with Real Traffic Light Hardware
If you are using a Raspberry Pi with LEDs:

import RPi.GPIO as GPIO

# Example GPIO pin setup (adjust to your wiring)
GREEN_PIN = 17
YELLOW_PIN = 27
RED_PIN = 22

GPIO.setmode(GPIO.BCM)
GPIO.setup(GREEN_PIN, GPIO.OUT)
GPIO.setup(YELLOW_PIN, GPIO.OUT)
GPIO.setup(RED_PIN, GPIO.OUT)

def set_light(green, yellow, red):
    GPIO.output(GREEN_PIN, green)
    GPIO.output(YELLOW_PIN, yellow)
    GPIO.output(RED_PIN, red)

# Example usage in main loop
set_light(1, 0, 0)  # Green ON
time.sleep(green_time)
set_light(0, 1, 0)  # Yellow ON
time.sleep(yellow_duration)
set_light(0, 0, 1)  # Red ON
time.sleep(red_duration)

